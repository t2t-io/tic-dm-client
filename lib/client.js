// Generated by LiveScript 1.5.0
(function(){
  var EE, SIOC, WSC, Skeleton, Client, exports;
  EE = require('events');
  SIOC = require('socket.io-client');
  global.getLogger = function(name){
    return {
      DBG: console.log,
      ERR: console.log,
      WARN: console.log,
      INFO: console.log
    };
  };
  WSC = require('yapps/lib/classes/web/wss-client-core');
  Skeleton = (function(){
    Skeleton.displayName = 'Skeleton';
    var prototype = Skeleton.prototype, constructor = Skeleton;
    function Skeleton(configs){
      this.configs = configs;
      return;
    }
    Skeleton.prototype.setWssc = function(wssc){
      this.wssc = wssc;
      return this.configs;
    };
    return Skeleton;
  }());
  Client = (function(superclass){
    var prototype = extend$((import$(Client, superclass).displayName = 'Client', Client), superclass).prototype, constructor = Client;
    function Client(server, name, token, opts, verbose){
      this.server = server;
      this.name = name != null ? name : 'smith';
      this.token = token != null ? token : null;
      this.opts = opts != null
        ? opts
        : {};
      this.verbose = verbose != null ? verbose : false;
      this.ee = new EE();
      this.rrctx = new Skeleton(opts);
      Client.superclass.call(this, SIOC, server, 'client', name, token, {}, verbose, this.rrctx, {});
    }
    Client.prototype.debug = function(message){
      if (!this.verbose) {
        return;
      }
      return console.log("[dm-client]: " + message);
    };
    Client.prototype.atConnected = function(ws){
      this.ee.emit('connected');
      return this.debug("connected.");
    };
    Client.prototype.atConfigured = function(ws, code, err){
      var self, message;
      ws = (self = this).ws;
      if (code === 0) {
        this.ee.emit('authenticated');
        return this.debug("configured/authenticated.");
      } else {
        message = "authentication error, code:" + code + ", err: " + err;
        this.ee.emit('error', message);
        return this.debug(message);
      }
    };
    Client.prototype.atDisconnected = function(ws){
      this.ee.emit('disconnected');
      return this.debug("disconnected.");
    };
    Client.prototype.process_data_peripheral_updated = function(items, profile, identity, peripheral){
      var peripheral_type, peripheral_id, version, state, metadata;
      peripheral_type = peripheral.peripheral_type, peripheral_id = peripheral.peripheral_id, version = peripheral.version, state = peripheral.state, metadata = peripheral.metadata;
      this.debug("peripheral_updated: " + profile + "/" + identity + "/" + peripheral_type + "/" + peripheral_id + ": version:" + version + " state:" + state + " metadata=>\n" + JSON.stringify(metadata, null, '  '));
      return this.ee.emit('peripheral_updated', profile, identity, peripheral_type, peripheral_id, version, state, metadata);
    };
    Client.prototype.process_data_production_updated = function(evts, profile, hostname, idx){
      this.debug("production_updated: " + profile + "/" + hostname);
      return this.ee.emit('production_updated', profile, hostname, idx, evts);
    };
    Client.prototype.on = function(evt, listener){
      return this.ee.on(evt, listener);
    };
    return Client;
  }(WSC));
  module.exports = exports = Client;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
